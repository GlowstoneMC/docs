1.13 Update
###########

.. contents::


Block Format
------------

"Block Data" refers to information about a certain block. The two components of Block Data are
its **type** (e.g. air, grass, acacia door, etc.) and its **state**. Each type has a set
of **properties**. Each combination of all the type's properties
is a state, and has its own numerical ID.

Example:

.. code-block:: js

    "minecraft:light_gray_bed": {
        "properties": {
          "facing": [   // Possible values for the "facing" property
            "north",
            "south",
            "west",
            "east"
          ],
          "occupied": [ // Possible values for the "occupied" property
            "true",
            "false"
          ],
          "part": [     // Possible values for the "part" property
            "head",
            "foot"
          ]
        },
        "states": [
          {
            "properties": {
              "facing": "north",
              "occupied": "true",
              "part": "head"
            },
            "id": 876
          },
          {
            "properties": {
              "facing": "north",
              "occupied": "true",
              "part": "foot"
            },
            "id": 877
          },
          [...]
        ]
      }
    }


There are 2 ways to encode Block Data:

* Numerical IDs (type base ID + state bit mask)
* Map (type's  ``minecraft:...`` key + map of string:string for state)


On-Disk Block Storage
=====================

Each chunk section (16x16x16 blocks) has its own "Palette".
A Palette is a list of Block Data maps (see above). In NBT format, the ``Palette`` tag is a list of compounds.

This is an example palette for a section with 19 different block states:

.. image:: palette_screenshot.png
    :scale: 50 %

The ``BlockStates`` tag is a Long Array. Each block is represented by a Palette index, corresponding to the order
of the section's Palette tag. All indices have the same bit size, corresponding to the size required
for the largest index (``ceil(log(n-1)/log(2))``, where ``n`` is the number of states in the Palette), with a minimum
of 4 bits per index.

The number of longs in the tag may grow from 256 longs (16 indices per long) to
as many longs as necessary to store all 4096 identically-sized indices.


Network Representation
======================

Similarly to the Disk Storage, a palette can be used to save bandwidth.
The palette is a list of integers (VarInt) -- the numerical IDs of each state used in the chunk.

Numerical IDs are incremental and start at 0 (``minecraft:air``). Contrary to previous Minecraft
versions, these IDs are not incremental per-type, but rather per-state.

For example, if type A has 2 properties with 2 possible values each, type A has 4 possible states.
If the first A state has ID 10, type B's states will start at 14.

**Encoding Example**:

.. code-block:: js

    "minecraft:A": {
      "properties": {
        "foo": [
          "true",
          "false"
        ],
        "bar": [
          "true",
          "false",
          "maybe"
        ]
      },
      "states": [
        {
          "properties": {
            "foo": "true",
            "bar": "true"
          },
          "id": 10
        },
        {
          "properties": {
            "foo": "true",
            "bar": "false"
          },
          "id": 11
        },
        {
          "properties": {
            "foo": "true",
            "bar": "maybe"
          },
          "id": 12
        },
        {
          "properties": {
            "foo": "false",
            "bar": "true"
          },
          "id": 13
        },
        [...]
      ]
    }

Knowing the ID of the first state of a type, it is possible to encode a state from the values
of the properties.

Let's say we want to encode ``minecraft:A[foo=true,bar=maybe]`` to the state's ID (12):

1. From a pre-calculated map, we can determine the base ID corresponding to ``minecraft:A`` to be **10**.

2. The properties are encoded:

   i.   The ``foo`` property has 2 possible values; the largest index, 1, takes 1 bit.
        The index of the value ("true", 0) is written to the first bit.

        Current bits: ``0``
   ii.  The ``bar`` property has 3 possible values; the largest index, 2, takes 2 bits.
        Since there is already a value on the lowest bit, the bits are shift by the
        size required for the current property (2).
        The index of the value ("maybe", 2) is then written on the two last bits.

        Current bits: ``010``
   iii. The result is then **10 + 0b010 = 12**.

.. note::
    Decoding numerical IDs is not necessary on the server-side in 1.13.
